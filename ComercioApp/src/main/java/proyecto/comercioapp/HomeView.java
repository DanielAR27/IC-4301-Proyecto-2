package proyecto.comercioapp;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.awt.event.KeyEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import proyecto.db.DBMediator;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;


public class HomeView extends javax.swing.JFrame {

    private int usuarioID;
    private String searchFilter;
    private String selectedItem;
    private int stillProducts;
    private int pagina;
    private String descuentoURL;
    private Map<Integer, JButton> botonesProductos;
    private List<List<Object>> productosPagina;
    private JPopupMenu sugerenciasMenu; // Menú emergente para sugerencias
    private boolean isAutocompletadoActivo = true; // Bandera para activar o desactivar el autocompletado

    
    public HomeView() {
        initComponents();
    }
    
    public HomeView(int usuarioID){
        initComponents();
        this.usuarioID = usuarioID;        
        inicializarFiltros();
        inicializarFiltroAutomatico();
        this.descuentoURL = "https://i.ibb.co/4tMXLwq/descuento-img.png";
        this.pagina = 0;
        this.productosPagina = new ArrayList<>();
        this.botonesProductos = new TreeMap<>();
        this.searchFilter = "Sin filtro activo.";
        this.stillProducts = DBMediator.verificarProductosPorPagina(pagina);
        this.productosPagina = DBMediator.getProductosPorPagina(pagina);
        crearBotonesProductos();
        actualizarBotones(pagina);
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void cambiarModoFiltrado() {
        String modoSeleccionado = (String) filterTypeComboBox.getSelectedItem();
        if ("Automático".equals(modoSeleccionado)) {
            isAutocompletadoActivo = true; // Activar el autocompletado
        } else if ("Manual".equals(modoSeleccionado)) {
            isAutocompletadoActivo = false; // Desactivar el autocompletado
            sugerenciasMenu.setVisible(false); // Ocultar el menú emergente
        }
    }

    private void procesarTextoIngresado() {
    if (!isAutocompletadoActivo) return; // No hacer nada si el autocompletado está desactivado

    String textoIngresado = filterTextField.getText().trim();

    // Si no hay texto, ocultar el menú
    if (textoIngresado.isEmpty()) {
        sugerenciasMenu.setVisible(false);
        return;
    }

    // Obtener sugerencias dinámicamente
    List<String> sugerencias = DBMediator.getSugerenciasPorNombre(textoIngresado);

    // Si no hay sugerencias, ocultar el menú
    if (sugerencias == null || sugerencias.isEmpty()) {
        sugerenciasMenu.setVisible(false);
        return;
    }

    // Limpiar el menú de sugerencias previo
    sugerenciasMenu.removeAll();

    // Crear un "stop" lógico: Agregar sugerencias al menú
    for (String sugerencia : sugerencias) {
        JMenuItem item = new JMenuItem(sugerencia);
        item.addActionListener(e -> {
            seleccionarSugerencia(sugerencia); // Manejar la selección
        });
        sugerenciasMenu.add(item);
    }

    // Mostrar el menú con un retraso para evitar interferencias de eventos
    SwingUtilities.invokeLater(() -> {
        sugerenciasMenu.show(filterTextField, 0, filterTextField.getHeight());
    });
}

private void seleccionarSugerencia(String sugerencia) {
    filterTextField.setText(sugerencia); // Insertar la sugerencia en el campo
    filterTextField.requestFocus();      // Asegurarse de que el campo reciba foco
    sugerenciasMenu.setVisible(false);   // Ocultar el menú
    sugerenciasMenu.removeAll();         // Limpiar el menú para evitar reaparición
    selectedItem = sugerencia;
    this.pagina = 0;
    actualizarBotones(pagina); // Actualizar los botones con la selección
}

private void inicializarFiltroAutomatico() {
    // Inicializar el menú emergente
    sugerenciasMenu = new JPopupMenu();

    // Listener para cambios en el texto del campo
    filterTextField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
        @Override
        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            SwingUtilities.invokeLater(() -> procesarTextoIngresado());
        }

        @Override
        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            SwingUtilities.invokeLater(() -> procesarTextoIngresado());
        }

        @Override
        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            SwingUtilities.invokeLater(() -> procesarTextoIngresado());
        }
    });

    // Listener para teclas específicas
    filterTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ENTER && sugerenciasMenu.isVisible()) {
                // Simular selección con Enter
                if (sugerenciasMenu.getComponentCount() > 0) {
                    JMenuItem firstItem = (JMenuItem) sugerenciasMenu.getComponent(0);
                    seleccionarSugerencia(firstItem.getText());
                }
            }
        }
    });
}

    
    private void confirmarEliminarCuenta() {
    // Crear el diálogo de confirmación
        int respuesta = JOptionPane.showConfirmDialog(
                this,
                "¿Está seguro de eliminar su cuenta de usuario? Esta acción es irreversible.",
                "Confirmación de eliminación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        // Verificar la respuesta del usuario
        if (respuesta == JOptionPane.YES_OPTION) {
            eliminarCuenta();
        }
    }

    private void eliminarCuenta() {
        int res = DBMediator.deleteDatosUsuario(usuarioID); // Método que debes implementar en DBMediator

        switch(res) {
            case 0 ->{
            JOptionPane.showMessageDialog(this, "Cuenta eliminada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            this.dispose(); // Cerrar la ventana actual
            LoginView loginView = new LoginView(); // Redirigir al Login
            loginView.setVisible(true);
            } default -> {
                JOptionPane.showMessageDialog(this, "Error al eliminar la cuenta. Intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuMomentaneo = new javax.swing.JPopupMenu();
        adminMenu = new javax.swing.JPopupMenu();
        usuarioIcon = new javax.swing.JButton();
        anteriorButton = new javax.swing.JButton();
        siguienteButton = new javax.swing.JButton();
        shopIcon = new javax.swing.JButton();
        receiptIcon = new javax.swing.JButton();
        filterComboBox = new javax.swing.JComboBox<>();
        filterLabel = new javax.swing.JLabel();
        selectLabel = new javax.swing.JLabel();
        filterDetailComboBox = new javax.swing.JComboBox<>();
        filterTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        reviewIcon = new javax.swing.JButton();
        adminIcon = new javax.swing.JButton();
        filterTypeLabel = new javax.swing.JLabel();
        filterTypeComboBox = new javax.swing.JComboBox<>();

        // Crear los elementos del menú
        JMenuItem viewPersonalDataOption = new JMenuItem("Ver datos personales");
        JMenuItem editUserOption = new JMenuItem("Editar datos personales");
        JMenuItem directionOption = new JMenuItem("Registrar Dirección");
        JMenuItem payOption = new JMenuItem("Agregar método de pago");
        JMenuItem deleteAccountOption = new JMenuItem("Eliminar cuenta"); // Nueva opción para eliminar cuenta
        JMenuItem logoutOption = new JMenuItem("Cerrar Sesión");

        // Agregar los elementos al menú emergente en el orden deseado
        menuMomentaneo.add(viewPersonalDataOption);
        menuMomentaneo.add(editUserOption);
        menuMomentaneo.add(directionOption);
        menuMomentaneo.add(payOption);
        menuMomentaneo.add(deleteAccountOption); // Agregar la opción de eliminar cuenta justo antes de cerrar sesión
        menuMomentaneo.add(logoutOption);

        // Asignar acciones a cada opción del menú
        viewPersonalDataOption.addActionListener(e -> { // Acción para "Ver datos personales"
            UserDataView viewUserData = new UserDataView(usuarioID);
            viewUserData.setVisible(true);
        });

        editUserOption.addActionListener(e -> {
            EditUserView editUserView = new EditUserView(usuarioID);
            editUserView.setVisible(true);
        });

        directionOption.addActionListener(e -> {
            this.dispose();
            DirectionMenu directionMenu = new DirectionMenu(usuarioID);
            directionMenu.setVisible(true);
        });

        payOption.addActionListener(e -> {
            this.dispose();
            PayMethodMenu payMenu = new PayMethodMenu(usuarioID);
            payMenu.setVisible(true);
        });

        deleteAccountOption.addActionListener(e -> confirmarEliminarCuenta()); // Acción para eliminar cuenta

        logoutOption.addActionListener(e -> {
            this.dispose();
            LoginView login = new LoginView();
            login.setVisible(true);
        });

        JMenuItem manageCategories = new JMenuItem("Gestionar categorías");
        JMenuItem managePedidos = new JMenuItem("Gestionar pedidos");
        JMenuItem manageDiscounts = new JMenuItem("Gestionar descuentos");
        JMenuItem manageBrands = new JMenuItem("Gestionar marcas");
        JMenuItem manageCountries = new JMenuItem("Gestionar países");
        JMenuItem manageProvinces = new JMenuItem("Gestionar provincias");
        JMenuItem manageProducts = new JMenuItem("Gestionar productos");

        // Agrega las opciones al menú
        adminMenu.add(manageCategories);
        adminMenu.add(managePedidos);
        adminMenu.add(manageDiscounts);
        adminMenu.add(manageBrands);
        adminMenu.add(manageCountries);
        adminMenu.add(manageProvinces);
        adminMenu.add(manageProducts);

        manageCategories.addActionListener(e -> {
            this.dispose();
            new CategoriasView(usuarioID).setVisible(true);
        });

        managePedidos.addActionListener(e -> {
            this.dispose();
            FacturasEditView fev = new FacturasEditView(usuarioID);
            fev.setVisible(true);
        });

        manageDiscounts.addActionListener(e -> {
            this.dispose();
            new DescuentosView(usuarioID).setVisible(true);
        });

        manageBrands.addActionListener(e -> {
            this.dispose();
            new MarcasView(usuarioID).setVisible(true);
        });

        manageCountries.addActionListener(e -> {
            this.dispose();
            new PaisesView(usuarioID).setVisible(true);
        });

        manageProvinces.addActionListener(e -> {
            this.dispose();
            new ProvinciasView(usuarioID).setVisible(true);
        });

        manageProducts.addActionListener(e -> {
            this.dispose();
            new ProductosView(usuarioID).setVisible(true);
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tienda Pokemon");
        setResizable(false);

        try {
            URL urlUserIcon = new URL("https://i.ibb.co/QHRjgGg/icon-user.png");
            ImageIcon userIcon = new ImageIcon(urlUserIcon);
            usuarioIcon.setIcon(userIcon);

            // Agregar texto debajo del ícono y usar HTML para formatearlo en negrita
            usuarioIcon.setText("<html><center><b>Usuario</b></center></html>");

            // Configurar la posición del texto y el ícono
            usuarioIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            usuarioIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

            // Hacer el fondo transparente y quitar el borde
            usuarioIcon.setContentAreaFilled(false); // Hace que el fondo sea transparente
            usuarioIcon.setBorderPainted(false); // Quita el borde
            usuarioIcon.setFocusPainted(false); // Quita el borde de enfoque al hacer clic
        }catch(Exception e){
            usuarioIcon.setText("No se ha encontrado la imagen.");
        }
        usuarioIcon.setPreferredSize(new java.awt.Dimension(64, 64));
        usuarioIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioIconActionPerformed(evt);
            }
        });

        anteriorButton.setText("Página Anterior");
        anteriorButton.setPreferredSize(new java.awt.Dimension(120, 25));
        anteriorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorButtonActionPerformed(evt);
            }
        });

        siguienteButton.setText("Siguiente Página");
        siguienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteButtonActionPerformed(evt);
            }
        });

        try {
            URL urlShopIcon = new URL("https://i.ibb.co/YTkGtvq/icon-shop.png");
            ImageIcon shop = new ImageIcon(urlShopIcon);
            shopIcon.setIcon(shop);

            // Agregar texto debajo del ícono y usar HTML para formatearlo en negrita
            shopIcon.setText("<html><center><b>Carrito</b></center></html>");

            // Configurar la posición del texto y el ícono
            shopIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            shopIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

            // Hacer el fondo transparente y quitar el borde
            shopIcon.setContentAreaFilled(false); // Hace que el fondo sea transparente
            shopIcon.setBorderPainted(false); // Quita el borde
            shopIcon.setFocusPainted(false); // Quita el borde de enfoque al hacer clic
        }catch(Exception e){
            shopIcon.setText("No se ha encontrado la imagen.");
        }
        shopIcon.setPreferredSize(new java.awt.Dimension(64, 64));
        shopIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopIconActionPerformed(evt);
            }
        });

        try {
            URL urlReceiptIcon = new URL("https://i.ibb.co/TqFCWH7/receipt-img.png");
            ImageIcon receipt = new ImageIcon(urlReceiptIcon);
            receiptIcon.setIcon(receipt);

            // Agregar texto debajo del ícono y usar HTML para formatearlo en negrita
            receiptIcon.setText("<html><center><b>Facturas</b></center></html>");

            // Configurar la posición del texto y el ícono
            receiptIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            receiptIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

            // Hacer el fondo transparente y quitar el borde
            receiptIcon.setContentAreaFilled(false); // Hace que el fondo sea transparente
            receiptIcon.setBorderPainted(false); // Quita el borde
            receiptIcon.setFocusPainted(false); // Quita el borde de enfoque al hacer clic
        }catch(Exception e){
            receiptIcon.setText("No se ha encontrado la imagen.");
        }
        receiptIcon.setPreferredSize(new java.awt.Dimension(64, 64));
        receiptIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptIconActionPerformed(evt);
            }
        });

        filterComboBox.setMaximumRowCount(5);
        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin filtro activo.", "Filtrar por precio.", "Filtrar por popularidad.", "Filtrar por marca.", "Filtrar por categoría.", "Filtrar por nombre." , "Filtrar por descuento activo."}));
        filterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboBoxActionPerformed(evt);
            }
        });

        filterLabel.setText("Filtrar por:");

        selectLabel.setText("Seleccion Label");

        filterDetailComboBox.setMaximumRowCount(5);
        filterDetailComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterDetailComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterDetailComboBoxActionPerformed(evt);
            }
        });

        filterTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterTextFieldKeyPressed(evt);
            }
        });

        searchButton.setText("Buscar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        try {
            URL urlReviewIcon = new URL("https://i.ibb.co/NT5KZ2D/reviews-img.png");
            ImageIcon review = new ImageIcon(urlReviewIcon);
            reviewIcon.setIcon(review);

            // Agregar texto debajo del ícono y usar HTML para formatearlo en negrita
            reviewIcon.setText("<html><center><b>Reviews</b></center></html>");

            // Configurar la posición del texto y el ícono
            reviewIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            reviewIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

            // Hacer el fondo transparente y quitar el borde
            reviewIcon.setContentAreaFilled(false); // Hace que el fondo sea transparente
            reviewIcon.setBorderPainted(false); // Quita el borde
            reviewIcon.setFocusPainted(false); // Quita el borde de enfoque al hacer clic
        }catch(Exception e){
            reviewIcon.setText("No se ha encontrado la imagen.");
        }
        reviewIcon.setPreferredSize(new java.awt.Dimension(64, 64));
        reviewIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewIconActionPerformed(evt);
            }
        });

        try {
            URL urlAdminIcon = new URL("https://i.ibb.co/rd1YLFJ/tuerca.png");
            ImageIcon admin = new ImageIcon(urlAdminIcon);
            adminIcon.setIcon(admin);

            // Agregar texto debajo del ícono y usar HTML para formatearlo en negrita
            adminIcon.setText("<html><center><b>Administrador</b></center></html>");

            // Configurar la posición del texto y el ícono
            adminIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            adminIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

            // Hacer el fondo transparente y quitar el borde
            adminIcon.setContentAreaFilled(false); // Hace que el fondo sea transparente
            adminIcon.setBorderPainted(false); // Quita el borde
            adminIcon.setFocusPainted(false); // Quita el borde de enfoque al hacer clic
        }catch(Exception e){
            adminIcon.setText("No se ha encontrado la imagen.");
        }
        adminIcon.setPreferredSize(new java.awt.Dimension(64, 64));
        adminIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminIconActionPerformed(evt);
            }
        });

        filterTypeLabel.setText("¿Qué tipo de filtro desea?");

        filterTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Automático", "Manual"}));
        filterTypeComboBox.addActionListener(e -> cambiarModoFiltrado());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(anteriorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(siguienteButton)
                        .addGap(0, 454, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(filterTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filterLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterDetailComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filterTypeLabel)
                                    .addComponent(filterTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(104, 104, 104)))
                        .addComponent(adminIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reviewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(receiptIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shopIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usuarioIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shopIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(receiptIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(usuarioIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reviewIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(adminIcon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 371, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(anteriorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(siguienteButton))
                        .addGap(95, 95, 95))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterLabel)
                            .addComponent(filterTypeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterDetailComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usuarioIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioIconActionPerformed
        // Mostrar el menú emergente al mismo nivel que el frame
        menuMomentaneo.show(usuarioIcon, -5, usuarioIcon.getHeight());
    }//GEN-LAST:event_usuarioIconActionPerformed

    private void siguienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteButtonActionPerformed
        pagina += 1;
        actualizarBotones(pagina);
    }//GEN-LAST:event_siguienteButtonActionPerformed

    private void anteriorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorButtonActionPerformed
        pagina -= 1;
        actualizarBotones(pagina);
    }//GEN-LAST:event_anteriorButtonActionPerformed

    private void shopIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopIconActionPerformed
        verificarEstadoCarrito(usuarioID);
        verificarStockCarrito(usuarioID);
        this.dispose();
        CarritoView cv = new CarritoView (usuarioID);
        cv.setVisible(true);
    }//GEN-LAST:event_shopIconActionPerformed

    private void receiptIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptIconActionPerformed
        this.dispose();
        FacturasView fv = new FacturasView (usuarioID);
        fv.setVisible(true);
    }//GEN-LAST:event_receiptIconActionPerformed

    private void filterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboBoxActionPerformed
        searchFilter = (String) filterComboBox.getSelectedItem();
        switch (searchFilter) {
            case "Sin filtro activo.":
                selectLabel.setVisible(false);
                searchButton.setVisible(false);
                filterDetailComboBox.setVisible(false);
                filterTextField.setVisible(false);
                filterTypeLabel.setVisible(false);
                filterTypeComboBox.setVisible(false);
                this.pagina = 0;
                actualizarBotones(pagina);
                break;
            case "Filtrar por precio.":
                 selectLabel.setText("Elija como filtrar el precio:");
                 selectLabel.setVisible(true);
                 searchButton.setVisible(false);
                 filterDetailComboBox.setVisible(true);
                 filterTextField.setVisible(false);
                filterTypeLabel.setVisible(false);
                filterTypeComboBox.setVisible(false);
                 filterDetailComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Ascendente", "Descendente"}));
                 selectedItem = (String) filterDetailComboBox.getSelectedItem();
                 this.pagina = 0;
                 actualizarBotones(pagina);
                 break;
            case "Filtrar por popularidad.":
                 selectLabel.setText("Elija como filtrar la calificación promedio:");
                 selectLabel.setVisible(true);
                 searchButton.setVisible(false);
                 filterDetailComboBox.setVisible(true);
                 filterTextField.setVisible(false);
                filterTypeLabel.setVisible(false);
                filterTypeComboBox.setVisible(false);
                 filterDetailComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Ascendente", "Descendente"}));
                 selectedItem = (String) filterDetailComboBox.getSelectedItem();
                 this.pagina = 0;
                 actualizarBotones(pagina);
                 break;
            case "Filtrar por marca.":
                List<String> marcas = DBMediator.getMarcas();
                selectLabel.setText("Elija una marca para filtrar:");
                selectLabel.setVisible(true);
                searchButton.setVisible(false);
                filterDetailComboBox.setVisible(true);
                filterTextField.setVisible(false);
                filterTypeLabel.setVisible(false);
                filterTypeComboBox.setVisible(false);
                if (marcas.isEmpty() || marcas == null){
                    filterDetailComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "No hay marcas disponibles." }));
                }else{
                    filterDetailComboBox.setModel(new DefaultComboBoxModel<>(marcas.toArray(new String[0])));
                    selectedItem = (String) filterDetailComboBox.getSelectedItem();
                    this.pagina = 0;
                    actualizarBotones(pagina);
                }
                break;
            case "Filtrar por categoría.":
                List<String> categorias = DBMediator.getCategorias();
                selectLabel.setText("Elija una categoría para filtrar:");
                selectLabel.setVisible(true);
                searchButton.setVisible(false);
                filterDetailComboBox.setVisible(true);
                filterTextField.setVisible(false);
                filterTypeLabel.setVisible(false);
                filterTypeComboBox.setVisible(false);
                if (categorias.isEmpty() || categorias == null){
                    filterDetailComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "No hay categorías disponibles." }));
                }else{
                    filterDetailComboBox.setModel(new DefaultComboBoxModel<>(categorias.toArray(new String[0])));
                    selectedItem = (String) filterDetailComboBox.getSelectedItem();
                    this.pagina = 0;
                    actualizarBotones(pagina);
                }
                break;
            case "Filtrar por nombre.":
                selectLabel.setText("Elija un nombre para filtrar:");
                selectLabel.setVisible(true);
                searchButton.setVisible(true);
                filterDetailComboBox.setVisible(false);
                filterTextField.setVisible(true);
                filterTypeLabel.setVisible(true);
                filterTypeComboBox.setVisible(true);
                break;
            case "Filtrar por descuento activo.":
                selectLabel.setVisible(false);
                searchButton.setVisible(false);
                filterDetailComboBox.setVisible(false);
                filterTextField.setVisible(false);
                filterTypeLabel.setVisible(false);
                filterTypeComboBox.setVisible(false);
                this.pagina = 0;
                actualizarBotones(pagina);
                break;
        }
    }//GEN-LAST:event_filterComboBoxActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
            selectedItem = filterTextField.getText();
            this.pagina = 0;
            actualizarBotones(pagina);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void editarProducto(int productoID) {
        EditarProductoView editarView = new EditarProductoView(productoID);
        editarView.setVisible(true);
    }

    
    private void filterTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            selectedItem = filterTextField.getText();
            this.pagina = 0;
            actualizarBotones(pagina);
        }
    }//GEN-LAST:event_filterTextFieldKeyPressed

    private void filterDetailComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterDetailComboBoxActionPerformed
        selectedItem = (String) filterDetailComboBox.getSelectedItem();
        this.pagina = 0;
        actualizarBotones(pagina);
    }//GEN-LAST:event_filterDetailComboBoxActionPerformed

    private void reviewIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewIconActionPerformed
        this.dispose();
        ReviewProductos rp = new ReviewProductos(usuarioID);
        rp.setVisible(true);
    }//GEN-LAST:event_reviewIconActionPerformed

    private void adminIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminIconActionPerformed
        // Mostrar el menú emergente al mismo nivel que el frame
        adminMenu.show(adminIcon, -5, adminIcon.getHeight());
    }//GEN-LAST:event_adminIconActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeView().setVisible(true);
            }
        });
    }

    private int  verificarEstadoCarrito(int usuarioID){
        int resEstado = DBMediator.verificarEstadoCarrito(usuarioID);
        switch(resEstado) {
           case 0 -> {
               JOptionPane.showMessageDialog(this,
                       "Se han detectado cambios recientes en los precios o descuentos de algunos productos en su carrito.",
                       "Notificación",
                       JOptionPane.INFORMATION_MESSAGE);
                       return resEstado;
           }case 1->{
               return resEstado;
           }default ->{
                   JOptionPane.showMessageDialog(this,
                           "Ha ocurrido un error al cargar el carrito, intente de nuevo más tarde.",
                           "Advertencia",
                           JOptionPane.WARNING_MESSAGE);
                   return resEstado;
               }                    
         }       
    }
   
    private int verificarStockCarrito(int usuarioID){
        int resBorrado = DBMediator.verificarBorradoSinStock(usuarioID);
        switch(resBorrado) {
           case 0 -> {
               JOptionPane.showMessageDialog(this,
                       "Algunos productos han sido eliminados del carrito debido a su falta de stock.",
                       "Notificación",
                       JOptionPane.INFORMATION_MESSAGE);
               return resBorrado;
            }case 1->{
                return resBorrado;
           }default ->{
                   JOptionPane.showMessageDialog(this,
                           "Ha ocurrido un error al cargar el carrito, intente de nuevo más tarde.",
                           "Advertencia",
                           JOptionPane.WARNING_MESSAGE);
                   return resBorrado;
               }                    
         }       
    }
    
    private void crearBotonesProductos() {
        int xInicial = 80; // Posición inicial x
        int yInicial = 130; // Posición inicial y
        int anchoBoton = 150;
        int altoBoton = 150;
        int espacioEntreBotones = 10;

        // Crear 10 botones
        for (int  i = 0; i < 10; i++) {
            int botonPosition = i; // Variable temporal para capturar el valor de i
            JButton boton = new JButton("Botón " + (i + 1));
            boton.setBounds(xInicial, yInicial, anchoBoton, altoBoton);
            boton.setVisible(true); // Todos los botones visibles por defecto
            boton.addActionListener(e -> {showProductoInfo(botonPosition);});
            // Agregar el botón al mapa
            botonesProductos.put(i, boton);
            this.add(boton);
            
            // Actualizar la posición x para el siguiente botón
            xInicial += anchoBoton + espacioEntreBotones;

            // Si llegamos al quinto botón, bajar a la siguiente fila y resetear x
            if ((i + 1) % 5 == 0) {
                xInicial = 80; // Volver a la posición inicial en x
                yInicial += altoBoton + espacioEntreBotones; // Bajar en y
            }
            
        }   
    }
    

    public final void actualizarBotones(int numPagina) {
        int index = 0;
        switch(searchFilter){
            case "Sin filtro activo.":
                productosPagina = DBMediator.getProductosPorPagina(numPagina);
                stillProducts = DBMediator.verificarProductosPorPagina(numPagina + 1);
                break;
            case "Filtrar por precio.":
                if (selectedItem != null && !selectedItem.isEmpty()) {
                    productosPagina = DBMediator.getProductosOrdenadosPorPrecio(selectedItem, numPagina);
                    stillProducts = DBMediator.verificarProductosPorPagina(numPagina + 1);
                } else {
                    // Si no hay marca seleccionada, muestra un mensaje o usa un comportamiento por defecto
                    productosPagina = new ArrayList<>();
                    stillProducts = 0;
                }
                break;
            case "Filtrar por popularidad.":
                if (selectedItem != null && !selectedItem.isEmpty()) {
                    productosPagina = DBMediator.getProductosOrdenadosPorReviews(selectedItem, numPagina);
                    stillProducts = DBMediator.verificarProductosPorPagina(numPagina + 1);
                } else {
                    // Si no hay marca seleccionada, muestra un mensaje o usa un comportamiento por defecto
                    productosPagina = new ArrayList<>();
                    stillProducts = 0;
                }
                break;
            case "Filtrar por marca.":
                if (selectedItem != null && !selectedItem.isEmpty()) {
                    productosPagina = DBMediator.getProductosPorMarcaPorPagina(selectedItem, numPagina);
                    stillProducts = DBMediator.verificarProductosPorMarcaPorPagina(selectedItem, numPagina + 1);
                } else {
                    // Si no hay marca seleccionada, muestra un mensaje o usa un comportamiento por defecto
                    productosPagina = new ArrayList<>();
                    stillProducts = 0;
                }
                break;
            case "Filtrar por categoría.":
                if (selectedItem != null && !selectedItem.isEmpty()) {
                    productosPagina = DBMediator.getProductosPorCategoriaPorPagina(selectedItem, numPagina);
                    stillProducts = DBMediator.verificarProductosPorCategoriaPorPagina(selectedItem, numPagina + 1);
                } else {
                    // Si no hay marca seleccionada, muestra un mensaje o usa un comportamiento por defecto
                    productosPagina = new ArrayList<>();
                    stillProducts = 0;
                }
                break;
            case "Filtrar por nombre.":
                if (selectedItem != null && !selectedItem.isEmpty()) {
                    productosPagina = DBMediator.getProductosPorNombrePorPagina(selectedItem, numPagina);
                    stillProducts = DBMediator.verificarProductosPorNombrePorPagina(selectedItem, numPagina + 1);
                } else {
                    // Si no hay marca seleccionada, muestra un mensaje o usa un comportamiento por defecto
                    productosPagina = new ArrayList<>();
                    stillProducts = 0;
                }
                break;
            case "Filtrar por descuento activo.":
                productosPagina = DBMediator.getProductosConDescuentoPorPagina(pagina);
                stillProducts = DBMediator.verificarProductosConDescuentoPorPagina(numPagina + 1);
                break;            
            default:
                break;
        }

        // Limpiar los íconos de descuento existentes de los botones
        for (JButton boton : botonesProductos.values()) {
            // Remover todos los componentes dentro del botón
            boton.removeAll();
            boton.revalidate();
            boton.repaint();
        }
        
        for (List<Object> producto : productosPagina) {
          JButton boton = botonesProductos.get(index);
          if (boton != null) {
              try {
                  // Cargar la imagen de forma asíncrona
                  cargarImagenEnBoton(boton, (String) producto.get(3));

                  // Configurar el texto con el nombre y el precio en negrita
                  String nombreProducto = (String) producto.get(1);
                  float precio = (Float) producto.get(2);
                  String texto = "<html><center>" + nombreProducto + "<br><b>£" + precio + "</b></center></html>";
                  boton.setText(texto);

                  // Configurar la posición del texto y la imagen
                  boton.setHorizontalTextPosition(SwingConstants.CENTER);
                  boton.setVerticalTextPosition(SwingConstants.BOTTOM);

                // Verificar si el producto tiene un descuento y agregar el ícono si es así
                if ("S".equals(producto.get(4))) {
                    URL urlDescuento = new URL(descuentoURL);
                    ImageIcon iconoDescuento = new ImageIcon(urlDescuento);
                    JLabel labelDescuento = new JLabel(iconoDescuento);
                    labelDescuento.setBounds(boton.getWidth() - iconoDescuento.getIconWidth() + 5, 0,
                                              iconoDescuento.getIconWidth(), iconoDescuento.getIconHeight());
                    boton.setLayout(null);
                    boton.add(labelDescuento);
                }
                
                  boton.setVisible(true);

              } catch (Exception e) {
                  System.out.println("Error al cargar la imagen: " + e.getMessage());
                  boton.setText("Error en imagen");
              }
              index++;
          }
      }
        // Ocultar los botones que no tienen datos
        for (int i = index; i < 10; i++) {
            JButton boton = botonesProductos.get(i);
            if (boton != null) {
                boton.setVisible(false);
            }
        }

        // Mostrar/ocultar botón "Anterior"
        anteriorButton.setVisible(pagina > 0);

        // Mostrar/ocultar botón "Siguiente" si hay menos de 10 productos
        siguienteButton.setVisible(stillProducts == 1);
    }

    private void showProductoInfo(int botonPosition){
        int productoID = (Integer) productosPagina.get(botonPosition).get(0); //Obtener el ID del producto del cual se toca el botón.
        ProductoCarrito pc = new ProductoCarrito(this, true, usuarioID, productoID);
        pc.setVisible(true);
    }

    private void cargarImagenEnBoton(JButton boton, String urlImagen) {
        SwingWorker<ImageIcon, Void> worker = new SwingWorker<>() {
            @Override
            protected ImageIcon doInBackground() throws Exception {
                try {
                    // Cargar la imagen en un hilo en segundo plano
                    URL url = new URL(urlImagen);
                    return new ImageIcon(url);
                } catch (Exception e) {
                    return null;
                }
            }

            @Override
            protected void done() {
                try {
                    ImageIcon icono = get();
                    if (icono != null) {
                        boton.setIcon(icono);
                        boton.revalidate();
                        boton.repaint();
                    }else{
                        // Si no se cargó la imagen, usar la imagen de fallback
                        URL fallbackUrl = new URL("https://i.ibb.co/VM6PNKG/missigno.png");
                        ImageIcon fallbackIcon = new ImageIcon(fallbackUrl);
                        boton.setIcon(fallbackIcon);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    boton.setText("Error en imagen");
                }
            }
        };

        // Ejecutar el worker
        worker.execute();
    }
    
    public final void resetearPagina(){
        this.pagina = 0;
    }
    
    private void inicializarFiltros(){
        this.setLayout(null);
        String rol = DBMediator.getRolPorUsuarioID(usuarioID);
        if (rol.equals("Cliente")){
            adminIcon.setVisible(false);
        }
        filterDetailComboBox.setBounds(selectLabel.getX(), selectLabel.getY() + 20,
                filterDetailComboBox.getWidth(), filterDetailComboBox.getHeight());
        filterTextField.setBounds(selectLabel.getX(), selectLabel.getY() + 20,
                filterTextField.getWidth(), filterTextField.getHeight());
        searchButton.setBounds(selectLabel.getX() + 240, selectLabel.getY() + 20 ,
                searchButton.getWidth(), searchButton.getHeight());
        filterDetailComboBox.setVisible(false);
        searchButton.setVisible(false);
        filterTextField.setVisible(false);
        filterTypeLabel.setVisible(false);
        filterTypeComboBox.setVisible(false);
        selectLabel.setVisible(false);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adminIcon;
    private javax.swing.JPopupMenu adminMenu;
    private javax.swing.JButton anteriorButton;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JComboBox<String> filterDetailComboBox;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JComboBox<String> filterTypeComboBox;
    private javax.swing.JLabel filterTypeLabel;
    private javax.swing.JPopupMenu menuMomentaneo;
    private javax.swing.JButton receiptIcon;
    private javax.swing.JButton reviewIcon;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JButton shopIcon;
    private javax.swing.JButton siguienteButton;
    private javax.swing.JButton usuarioIcon;
    // End of variables declaration//GEN-END:variables
}