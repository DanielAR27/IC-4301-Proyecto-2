package proyecto.comercioapp;

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import proyecto.db.DBMediator;
import proyecto.utils.CheckUtils;

public class LoginView extends javax.swing.JFrame {

    /**
     * Creates new form LoginView
     */
    public LoginView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoginPanel = new javax.swing.JPanel();
        emailLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        acceptButton = new javax.swing.JButton();
        mensajeLabel = new javax.swing.JLabel();
        registerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");
        setResizable(false);

        LoginPanel.setBackground(new java.awt.Color(153, 204, 255));

        emailLabel.setBackground(new java.awt.Color(0, 0, 0));
        emailLabel.setForeground(new java.awt.Color(0, 0, 0));
        emailLabel.setText("Correo:");

        passwordLabel.setBackground(new java.awt.Color(0, 0, 0));
        passwordLabel.setForeground(new java.awt.Color(0, 0, 0));
        passwordLabel.setText("Contraseña:");

        emailTextField.setBackground(new java.awt.Color(255, 255, 255));
        emailTextField.setForeground(new java.awt.Color(0, 0, 0));

        passwordField.setBackground(new java.awt.Color(255, 255, 255));
        passwordField.setForeground(new java.awt.Color(0, 0, 0));
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        acceptButton.setText("Aceptar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        mensajeLabel.setBackground(new java.awt.Color(0, 0, 0));
        mensajeLabel.setForeground(new java.awt.Color(0, 0, 0));
        mensajeLabel.setText("¿No tiene cuenta? ");

        registerLabel.setBackground(new java.awt.Color(0, 0, 0));
        registerLabel.setForeground(new java.awt.Color(0, 0, 0));
        registerLabel.setText("<html><u><b>Registrarse</b></u></html>");
        registerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registerLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailTextField)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(mensajeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registerLabel)))
                .addContainerGap(238, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(310, 310, 310))
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                .addContainerGap(184, Short.MAX_VALUE)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(acceptButton)
                .addGap(27, 27, 27)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerLabel)
                    .addComponent(mensajeLabel))
                .addGap(144, 144, 144))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerLabelMouseClicked
        this.dispose();
        RegisterView register = new RegisterView();
        register.setVisible(true);
    }//GEN-LAST:event_registerLabelMouseClicked

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        try{
            String email = emailTextField.getText();
            String password = new String (passwordField.getPassword());
            String passwordEncrypted = DBMediator.getPassword(email);
                    
             // Verificar si el email es válido
            if (!CheckUtils.isValidEmail(email)) {
                JOptionPane.showMessageDialog(this, "Verifique que el correo sea válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return; // Detener la ejecución si el email es inválido
            }
            
            // Verificar si la contraseña es válida
            if(!CheckUtils.isPasswordValid(password)){
                JOptionPane.showMessageDialog(this, "Verifique que la contraseña tenga más de 5 caracteres.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return; // Detener la ejecución si la contraseña es inválida
            }
            
             // Verificar que se haya recuperado una contraseña.
            if (passwordEncrypted == null) {
                JOptionPane.showMessageDialog(this, "Verifique que el correo ingresado exista.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return; // Detener la ejecución si no se retorna contraseña
            }

            if(!CheckUtils.checkPassword(password, passwordEncrypted)){
                JOptionPane.showMessageDialog(this, "La contraseña no es correcta, intente de nuevo.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return; // Detener la ejecución si no se retorna contraseña                
            }else{
                int usuarioID = DBMediator.getUserID(email);
                this.dispose();
                HomeView home = new HomeView(usuarioID);
                home.setVisible(true);                    
            }
            
        }catch (Exception e){
            e.printStackTrace();
           JOptionPane.showMessageDialog(this, "Se ha producido un error, intente de nuevo por favor.", "Advertencia", JOptionPane.ERROR_MESSAGE);
            return; // Detener la ejecución si la contraseña es inválida
        }
        
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
         if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
                String email = emailTextField.getText();
                String password = new String (passwordField.getPassword());
                String passwordEncrypted = DBMediator.getPassword(email);

                 // Verificar si el email es válido
                if (!CheckUtils.isValidEmail(email)) {
                    JOptionPane.showMessageDialog(this, "Verifique que el correo sea válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return; // Detener la ejecución si el email es inválido
                }

                // Verificar si la contraseña es válida
                if(!CheckUtils.isPasswordValid(password)){
                    JOptionPane.showMessageDialog(this, "Verifique que la contraseña tenga más de 5 caracteres.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return; // Detener la ejecución si la contraseña es inválida
                }

                 // Verificar que se haya recuperado una contraseña.
                if (passwordEncrypted == null) {
                    JOptionPane.showMessageDialog(this, "Verifique que el correo ingresado exista.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return; // Detener la ejecución si no se retorna contraseña
                }

                if(!CheckUtils.checkPassword(password, passwordEncrypted)){
                    JOptionPane.showMessageDialog(this, "La contraseña no es correcta, intente de nuevo.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return; // Detener la ejecución si no se retorna contraseña                
                }else{
                    int usuarioID = DBMediator.getUserID(email);
                    this.dispose();
                    HomeView home = new HomeView(usuarioID);
                    home.setVisible(true);                    
                }
            }catch (NullPointerException npe){
               JOptionPane.showMessageDialog(this, "No se ha podido establecer conexión con la base de datos, intente de nuevo más tarde.", "Advertencia", JOptionPane.ERROR_MESSAGE);                
               System.exit(0);
            }catch (Exception e){
               JOptionPane.showMessageDialog(this, "Se ha producido un error, intente de nuevo por favor.", "Advertencia", JOptionPane.ERROR_MESSAGE);
                return; // Detener la ejecución si la contraseña es inválida
            }
        }
    }//GEN-LAST:event_passwordFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JButton acceptButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel mensajeLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel registerLabel;
    // End of variables declaration//GEN-END:variables
}
