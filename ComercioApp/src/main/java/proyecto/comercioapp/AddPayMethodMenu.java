package proyecto.comercioapp;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import proyecto.db.DBMediator;
import proyecto.utils.CheckUtils;

/**
 *
 * @author colos
 */
public class AddPayMethodMenu extends javax.swing.JFrame {
    private SimpleDateFormat formatoFecha;
    private String claveMaestra = "X9f!z7L*Q4b@d2W#"; // Una llave generada al azar para respaldar los datos.
    private int usuarioID;
    private Integer metodoPagoID;
    
    public AddPayMethodMenu() {
        initComponents();
    }
    
    public AddPayMethodMenu(int usuarioID, Integer metodoPagoID){
        initComponents();
        this.formatoFecha =  new SimpleDateFormat("yyyy-MM-dd");
        this.usuarioID = usuarioID;
        this.metodoPagoID = metodoPagoID;
        if (metodoPagoID != null){
            cargarDatosMetodoPago();
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddDirectionPanel = new javax.swing.JPanel();
        creditNumberLabel = new javax.swing.JLabel();
        creditNumberTextField = new javax.swing.JTextField();
        ownerLabel = new javax.swing.JLabel();
        expireDateLabel = new javax.swing.JLabel();
        securityCodeLabel = new javax.swing.JLabel();
        securityCodeTextField = new javax.swing.JTextField();
        direccionesLabel = new javax.swing.JLabel();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        ownerTextField = new javax.swing.JTextField();
        ExpireDateChooser = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agregar Método de Pago");
        setResizable(false);

        AddDirectionPanel.setBackground(new java.awt.Color(153, 204, 255));

        creditNumberLabel.setForeground(new java.awt.Color(0, 0, 0));
        creditNumberLabel.setText("Número de Tarjeta");

        ownerLabel.setForeground(new java.awt.Color(0, 0, 0));
        ownerLabel.setText("Nombre del Titular");

        expireDateLabel.setForeground(new java.awt.Color(0, 0, 0));
        expireDateLabel.setText("Fecha de Expiración");

        securityCodeLabel.setForeground(new java.awt.Color(0, 0, 0));
        securityCodeLabel.setText("Código de Seguridad");

        direccionesLabel.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        direccionesLabel.setForeground(new java.awt.Color(0, 0, 0));
        direccionesLabel.setText("Registrar Método de Pago");

        acceptButton.setText("Aceptar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        // Establecer la fecha máxima seleccionable a hoy
        ExpireDateChooser.setMinSelectableDate(new Date());

        javax.swing.GroupLayout AddDirectionPanelLayout = new javax.swing.GroupLayout(AddDirectionPanel);
        AddDirectionPanel.setLayout(AddDirectionPanelLayout);
        AddDirectionPanelLayout.setHorizontalGroup(
            AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddDirectionPanelLayout.createSequentialGroup()
                .addGroup(AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddDirectionPanelLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(direccionesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(creditNumberLabel)
                            .addComponent(creditNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                            .addComponent(ownerLabel)
                            .addComponent(expireDateLabel)
                            .addComponent(securityCodeLabel)
                            .addComponent(securityCodeTextField)
                            .addComponent(ownerTextField)
                            .addComponent(ExpireDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(AddDirectionPanelLayout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(cancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        AddDirectionPanelLayout.setVerticalGroup(
            AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddDirectionPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(direccionesLabel)
                .addGap(53, 53, 53)
                .addComponent(creditNumberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(creditNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ownerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ownerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(expireDateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ExpireDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(securityCodeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(securityCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddDirectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddDirectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
       try{ 
            String numeroTarjeta = creditNumberTextField.getText();
            String titular = ownerTextField.getText();
            String fechaExpiracion = formatoFecha.format(ExpireDateChooser.getDate());
            String codigoSeguridad = securityCodeTextField.getText();
            
            if(!CheckUtils.isValidCardNumber(numeroTarjeta)){
              JOptionPane.showMessageDialog(this, "Verifique que el número de tarjeta sea válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
              return;                
            }
            
            if(!CheckUtils.isValidSecurityCode(codigoSeguridad)){
              JOptionPane.showMessageDialog(this, "Verifique que el código de seguridad sea válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
              return;                   
            }
            
            // Generar y encriptar la tarjeta correctamente
            String randomKey = CheckUtils.generateKey();
            // Encriptar la clave generada con la clave maestra
            String encryptedKey = CheckUtils.encrypt(randomKey, claveMaestra);
            // Encriptar el número de tarjeta con la clave generada (no encriptada)
            String encryptedCardNumber = CheckUtils.encrypt(numeroTarjeta, randomKey);
            
             int res = DBMediator.UpsertMetodoPago(metodoPagoID, usuarioID, encryptedCardNumber,
                     encryptedKey, titular, fechaExpiracion, codigoSeguridad);
            switch (res) {
                case 0 -> {
                    JOptionPane.showMessageDialog(this, "Se ha actualizado exitosamente el método de pago.", "Notificación", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                    PayMethodMenu pm = new PayMethodMenu(usuarioID);
                    pm.setVisible(true);
                }case 1->{
                    JOptionPane.showMessageDialog(this, "Se ha registrado exitosamente el método de pago.", "Notificación", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                    PayMethodMenu pm = new PayMethodMenu(usuarioID);
                    pm.setVisible(true);              
                }case -1 -> {
                    JOptionPane.showMessageDialog(this, "Verifique no dejar espacios en blanco.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;                     
                }default ->{
                    JOptionPane.showMessageDialog(this, "No se ha podido concretar la acción, intente de nuevo porfavor.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;                        
                }
            }                    
       }catch (NullPointerException npe){
              JOptionPane.showMessageDialog(this, "Verifique haber ingresado una fecha antes de continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
              return;              
       }catch (Exception e){
                e.printStackTrace();
               JOptionPane.showMessageDialog(this, "Ha ocurrido un error, intente de nuevo más tarde.", "Advertencia", JOptionPane.ERROR_MESSAGE);
              return;                
       }   
            
            
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(this,
            "¿Está seguro de regresar? No se guardarán los cambios.",
            "Advertencia",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (respuesta == JOptionPane.YES_OPTION) {
            // Cerrar la ventana actual y abrir una nueva instancia de DirectionMenu
            this.dispose(); // Cierra la ventana actual
            PayMethodMenu payMenu = new PayMethodMenu(usuarioID); // Crear una nueva instancia
            payMenu.setVisible(true); // Mostrar la nueva ventana
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cargarDatosMetodoPago(){
        List <Object> metodoPagoInfo = DBMediator.getMetodoPagoPorID(metodoPagoID);
        String decryptedCardNumber = CheckUtils.decrpytCardNumber((String) metodoPagoInfo.get(0),
                (String) metodoPagoInfo.get(1));
        creditNumberTextField.setText(decryptedCardNumber);
        ownerTextField.setText((String) metodoPagoInfo.get(2));
        ExpireDateChooser.setDate((Date) metodoPagoInfo.get(3) );
        securityCodeTextField.setText((String) metodoPagoInfo.get(4));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddPayMethodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddPayMethodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddPayMethodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddPayMethodMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddPayMethodMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddDirectionPanel;
    private com.toedter.calendar.JDateChooser ExpireDateChooser;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel creditNumberLabel;
    private javax.swing.JTextField creditNumberTextField;
    private javax.swing.JLabel direccionesLabel;
    private javax.swing.JLabel expireDateLabel;
    private javax.swing.JLabel ownerLabel;
    private javax.swing.JTextField ownerTextField;
    private javax.swing.JLabel securityCodeLabel;
    private javax.swing.JTextField securityCodeTextField;
    // End of variables declaration//GEN-END:variables
}
