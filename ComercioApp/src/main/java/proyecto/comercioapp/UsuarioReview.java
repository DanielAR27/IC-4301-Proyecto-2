package proyecto.comercioapp;

import java.awt.Color;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import proyecto.db.DBMediator;

public class UsuarioReview extends javax.swing.JDialog {

    private int usuarioID;
    private int pagina;
    private int productoID;
    private Map<Integer, JLabel> reviewLabels;
    private String productoNombre;
    private String productoDescripcion;
    private Float precio;
    private Float stock;
    private String categoria;
    private String marca;
    private Float calificacionPromedio;
    private String img;
    private int reviews;
   
    public UsuarioReview(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public UsuarioReview(java.awt.Frame parent, boolean modal, int usuarioID, int productoID) {
        super(parent, modal);
        llenarAtributos(DBMediator.getProductoInfo(productoID));        
        initComponents();
        this.setLayout(null);
        this.pagina = 0;
        this.usuarioID = usuarioID;
        this.productoID = productoID;
        actualizarLabels();
        crearLabelsReviews();
        actualizarLabelsReviews(pagina);
        this.setTitle("Reseña (Producto #" + productoID+ ")");
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        anteriorButton = new javax.swing.JButton();
        infoLabel1 = new javax.swing.JLabel();
        infoLabel2 = new javax.swing.JLabel();
        iconLabel = new javax.swing.JLabel();
        siguienteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        anteriorButton.setText("Página Anterior");
        anteriorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorButtonActionPerformed(evt);
            }
        });

        infoLabel1.setText("INFO GENERAL");

        infoLabel2.setText("INFO GENERAL");

        iconLabel.setText(null);
        iconLabel.setLayout(null); // Usar un layout absoluto para permitir la posición manual de los componentes

        try {
            // Convertir la URL del String a un objeto URL
            URL imageUrl = new URL(img);

            // Crear un ImageIcon a partir de la URL
            ImageIcon imageIcon = new ImageIcon(imageUrl);

            // Asignar la imagen al JLabel
            iconLabel.setIcon(imageIcon);

            // Alinear la imagen al centro
            iconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            iconLabel.setVerticalAlignment(javax.swing.SwingConstants.CENTER);
            iconLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 4)); // Borde negro de 4 píxeles de grosor
        } catch (Exception e) {
            e.printStackTrace();
        }

        siguienteButton.setText("Siguiente Página");
        siguienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(infoLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(anteriorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(siguienteButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(infoLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(infoLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 213, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anteriorButton)
                    .addComponent(siguienteButton))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void siguienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteButtonActionPerformed
        pagina += 1;
        actualizarLabelsReviews(pagina);
    }//GEN-LAST:event_siguienteButtonActionPerformed

    private void anteriorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorButtonActionPerformed
      pagina -= 1;
      actualizarLabelsReviews(pagina);
    }//GEN-LAST:event_anteriorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsuarioReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsuarioReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsuarioReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsuarioReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UsuarioReview dialog = new UsuarioReview(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void llenarAtributos(List<Object> productoInfo){
        productoNombre = (String) productoInfo.get(0);
        productoDescripcion = (String) productoInfo.get(1);
        precio = (Float) productoInfo.get(2);
        stock = (Float) productoInfo.get(3);
        categoria = (String) productoInfo.get(4);
        marca = (String) productoInfo.get(5);
        calificacionPromedio = (Float) productoInfo.get(6);
        img = (String) productoInfo.get(7);
        reviews = (Integer) productoInfo.get(8);
    }
    
    private void crearLabelsReviews() {
        int xInicial = iconLabel.getX(); // Alineado con el iconLabel en el eje X
        int yInicial = iconLabel.getY() + iconLabel.getHeight() + 10; // Justo debajo de iconLabel
        int anchoLabel = 560; // Ancho de las etiquetas
        int espacioEntreReviews = 15; // Espacio entre cada review

        // Inicializar el mapa para almacenar las etiquetas
        reviewLabels = new TreeMap<>();

        // Crear las etiquetas vacías para dos reviews
        for (int i = 0; i < 2; i++) {
            // Crear y configurar la etiqueta de información completa (info + comentario)
            JLabel reviewLabel = new JLabel();
            reviewLabel.setBounds(xInicial, yInicial, anchoLabel, 80);
            reviewLabel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
            reviewLabel.setVerticalAlignment(JLabel.TOP);
            this.add(reviewLabel);
            reviewLabels.put(i, reviewLabel); // Guardar en el mapa

            // Incrementar la posición Y para la siguiente review
            yInicial += 80 + espacioEntreReviews;
        }

        // Refrescar el layout para que las etiquetas aparezcan en la interfaz
        this.revalidate();
        this.repaint();
    }
   
    private void actualizarLabelsReviews(int numPagina) {
        // Obtener las reviews para el producto y la página actual
        List<List<Object>> reviewsPagina = DBMediator.getReviewsPorProducto(productoID, numPagina);
        int stillReviews = DBMediator.verificarReviewsPorProducto(productoID, numPagina + 1);

        int index = 0;

        // Limpiar las etiquetas de reviews existentes
        for (JLabel reviewLabel : reviewLabels.values()) {
            reviewLabel.setText(""); // Limpiar el texto
            reviewLabel.setVisible(false); // Ocultar por defecto
        }

        // Llenar las etiquetas con las reviews obtenidas
        for (List<Object> review : reviewsPagina) {
            JLabel reviewLabel = reviewLabels.get(index);

            if (reviewLabel != null) {
                String nombre = (String) review.get(1);
                String apellido = (String) review.get(2);
                String email = (String) review.get(3);
                int calificacion = (Integer) review.get(4);
                String comentario = (String) review.get(5);

                // Configurar el texto de la review con formato HTML
                String textoReview = "<html><b>" + nombre + " " + apellido + "</b> (correo: " + email + ")<br>"
                                   + "Calificación Otorgada: " + calificacion + "✩ <br>"
                                   + "<i>" + comentario + "</i></html>";
                reviewLabel.setText(textoReview);
                reviewLabel.setVisible(true); // Hacer visible la etiqueta
                index++;
            }
        }

        // Mostrar/ocultar botón "Anterior" y "Siguiente"
        anteriorButton.setVisible(numPagina > 0);
        siguienteButton.setVisible(stillReviews == 1);

        // Refrescar la vista para que los cambios en los labels se reflejen en pantalla
        this.revalidate();
        this.repaint();
    }

    
    
    private void actualizarLabels() {
        String infoLabelText1 = "<html>"
                + "<b>Nombre:</b> " + productoNombre + "<br>"
                + "<b>Precio Unitario:</b> £" + precio + "<br>";

        String infoLabelText2 = "<html>"
                + "<b>Descripción:</b> " + productoDescripcion + "<br>"
                + "<b>Marca:</b> " + marca + "<br>"
                + "<b>Categoría:</b> " + categoria
                + "</html>";

        if (reviews > 0) {
            infoLabelText1 += "<b>Calificación Promedio:</b> " + calificacionPromedio + " ✩<br>";
        }
        infoLabelText1 += "</html>";  // Cerrar la etiqueta HTML solo al final

        infoLabel1.setText(infoLabelText1);
        infoLabel2.setText(infoLabelText2);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anteriorButton;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel infoLabel1;
    private javax.swing.JLabel infoLabel2;
    private javax.swing.JButton siguienteButton;
    // End of variables declaration//GEN-END:variables
}
