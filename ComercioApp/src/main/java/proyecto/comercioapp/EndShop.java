package proyecto.comercioapp;

import java.util.List;
import javax.swing.JOptionPane;
import proyecto.db.DBMediator;
import proyecto.utils.CheckUtils;

public class EndShop extends javax.swing.JFrame {

    private int usuarioID;
    private int direccionID;
    private float totalCarrito;
    private float costoEnvio;
    private int metodoPagoID;

    /**
     * Creates new form EndShop
     */
    public EndShop() {
        initComponents();
    }

    public EndShop(int usuarioID, int direccionID, int metodoPagoID) {
        this.usuarioID = usuarioID;
        this.direccionID = direccionID;
        this.metodoPagoID = metodoPagoID;
        this.totalCarrito = DBMediator.getTotalCarrito(usuarioID); // Supongamos que este método ya existe y obtiene el total.
        this.costoEnvio = DBMediator.getEnvioPorDireccionID(direccionID);
        initComponents();
        actualizarDireccionLabel(direccionID);
        actualizarMetodoPagoLabel(metodoPagoID);
        actualizarTotalLabel(usuarioID);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PayPanel = new javax.swing.JPanel();
        verificacionLabel = new javax.swing.JLabel();
        direccionLabel = new javax.swing.JLabel();
        metodoPagoLabel = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        completeShopButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Finalizar Compra");
        setResizable(false);

        PayPanel.setBackground(new java.awt.Color(153, 204, 255));

        verificacionLabel.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        verificacionLabel.setForeground(new java.awt.Color(0, 0, 0));
        verificacionLabel.setText("Verificación de Pago");

        direccionLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        direccionLabel.setForeground(new java.awt.Color(0, 0, 0));
        direccionLabel.setText("Dirección");

        metodoPagoLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        metodoPagoLabel.setForeground(new java.awt.Color(0, 0, 0));
        metodoPagoLabel.setText("Método de Pago:");

        totalLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        totalLabel.setForeground(new java.awt.Color(0, 0, 0));
        totalLabel.setText("Total: ");

        completeShopButton.setText("Completar Compra");
        completeShopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeShopButtonActionPerformed(evt);
            }
        });

        returnButton.setText("Regresar");
        returnButton.setPreferredSize(new java.awt.Dimension(129, 25));
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PayPanelLayout = new javax.swing.GroupLayout(PayPanel);
        PayPanel.setLayout(PayPanelLayout);
        PayPanelLayout.setHorizontalGroup(
            PayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PayPanelLayout.createSequentialGroup()
                .addContainerGap(186, Short.MAX_VALUE)
                .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(completeShopButton)
                .addGap(235, 235, 235))
            .addGroup(PayPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(PayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(verificacionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(direccionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(metodoPagoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                    .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PayPanelLayout.setVerticalGroup(
            PayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(verificacionLabel)
                .addGap(15, 15, 15)
                .addComponent(direccionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metodoPagoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(PayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(completeShopButton)
                    .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        this.dispose();
        ChoosePayMethod chPayMethod = new ChoosePayMethod(usuarioID, direccionID);
        chPayMethod.setVisible(true);
    }//GEN-LAST:event_returnButtonActionPerformed

    private void completeShopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeShopButtonActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro de completar la compra?.", 
            "Advertencia", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.WARNING_MESSAGE);
         if (respuesta == JOptionPane.YES_OPTION) {
             // Si hubo cambios en el estado del carrito o en el stock, entonces se redirecciona a la pestaña del carrito.
             if (verificarEstadoCarrito(usuarioID) != 1 && verificarStockCarrito(usuarioID) != 1){
                 CarritoView carrito = new CarritoView (usuarioID);
                 this.dispose();
                 carrito.setVisible(true);
             }else{
                if(procesarCompra(usuarioID) != 0){
                    CarritoView carrito = new CarritoView (usuarioID);
                    this.dispose();
                    carrito.setVisible(true);                    
                }else{
                    HomeView home = new HomeView (usuarioID);
                    this.dispose();
                    home.setVisible(true);                            
                }
             }
         }
    }//GEN-LAST:event_completeShopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EndShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EndShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EndShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EndShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EndShop().setVisible(true);
                
            }
        });
    }


    private void actualizarDireccionLabel(int direccionID) {
        List<Object> direccion = DBMediator.getDireccionPorID(direccionID);
        if (direccion != null) {
            String contenidoDireccion = String.format(
                "<html><div style='margin-bottom:10px;'><b>Dirección:</b><br>%s, %s<br>%s<br>%s, %s<br>%s<br>Contacto: %s</div></html>",
                direccion.get(0), // País
                direccion.get(1), // Estado/Provincia
                direccion.get(2), // Dirección Línea 1
                direccion.get(3), // Dirección Línea 2
                direccion.get(4), // Ciudad
                direccion.get(5), // Código postal
                direccion.get(6)  // Contacto
            );
            direccionLabel.setText(contenidoDireccion);
        } else {
            direccionLabel.setText("Dirección no encontrada.");
        }
    }

    private void actualizarMetodoPagoLabel(int metodoPagoID) {
        List<Object> metodoPago = DBMediator.getMetodoPagoPorID(metodoPagoID);
        if (metodoPago != null) {
            String tarjetaOculta = CheckUtils.maskCardNumber(CheckUtils.decrpytCardNumber(
                (String) metodoPago.get(0), (String) metodoPago.get(1)));

            String contenidoMetodoPago = String.format(
                "<html><div style='margin-bottom:10px;'><b>Método de Pago:</b><br>Tarjeta terminada en ****%s<br>Titular: %s<br>Expiración: %s</div></html>",
                tarjetaOculta,
                metodoPago.get(2), // Nombre del titular
                metodoPago.get(3)  // Fecha de expiración
            );
            metodoPagoLabel.setText(contenidoMetodoPago);
        } else {
            metodoPagoLabel.setText("Método de pago no encontrado.");
        }
    }
 
    private void actualizarTotalLabel(int usuarioID) {
        if (totalCarrito >= 0) {
            String contenidoTotal;

            if (costoEnvio == -1) {
                contenidoTotal = String.format(
                    "<html><div style='margin-bottom:5px;'><b>Total:</b> £%.2f</div><div style='margin-top:5px;'><b>Costo de Envío:</b> No se ha encontrado costo de envío.</div></html>",
                    totalCarrito
                );
            } else {
                contenidoTotal = String.format(
                    "<html><div style='margin-bottom:5px;'><b>Total:</b> £%.2f</div><div style='margin-top:5px;'><b>Costo de Envío:</b> £%.2f</div></html>",
                    totalCarrito,
                    costoEnvio
                );
            }

            totalLabel.setText(contenidoTotal);
        } else {
            totalLabel.setText("<html><div style='margin-bottom:10px;'><b>Total:</b> No se ha podido procesar el total.</div></html>");
        }
    }

    private int procesarCompra(int usuarioID){
        int resProceso = DBMediator.procesarCompra(usuarioID, totalCarrito, costoEnvio);
        switch(resProceso) {
           case 0 -> {
               JOptionPane.showMessageDialog(this,
                       "Se ha procesado la compra exitosamente.",
                       "Notificación",
                       JOptionPane.INFORMATION_MESSAGE);
                       return resProceso;
           }default ->{
                   JOptionPane.showMessageDialog(this,
                           "Ha ocurrido un error al procesar la compra, intente de nuevo más tarde.",
                           "Advertencia",
                           JOptionPane.WARNING_MESSAGE);
                   return resProceso;
               }                    
         }             
    }
    
    private int  verificarEstadoCarrito(int usuarioID){
        int resEstado = DBMediator.verificarEstadoCarrito(usuarioID);
        switch(resEstado) {
           case 0 -> {
               JOptionPane.showMessageDialog(this,
                       "Se han detectado cambios recientes en los precios o descuentos de algunos productos en su carrito.",
                       "Notificación",
                       JOptionPane.INFORMATION_MESSAGE);
                       return resEstado;
           }case 1->{
               return resEstado;
           }default ->{
                   JOptionPane.showMessageDialog(this,
                           "Ha ocurrido un error al cargar el carrito, intente de nuevo más tarde.",
                           "Advertencia",
                           JOptionPane.WARNING_MESSAGE);
                   return resEstado;
               }                    
         }       
    }
   
    private int verificarStockCarrito(int usuarioID){
        int resBorrado = DBMediator.verificarBorradoSinStock(usuarioID);
        switch(resBorrado) {
           case 0 -> {
               JOptionPane.showMessageDialog(this,
                       "Algunos productos han sido eliminados del carrito debido a su falta de stock.",
                       "Notificación",
                       JOptionPane.INFORMATION_MESSAGE);
               return resBorrado;
            }case 1->{
                return resBorrado;
           }default ->{
                   JOptionPane.showMessageDialog(this,
                           "Ha ocurrido un error al cargar el carrito, intente de nuevo más tarde.",
                           "Advertencia",
                           JOptionPane.WARNING_MESSAGE);
                   return resBorrado;
               }                    
         }   
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PayPanel;
    private javax.swing.JButton completeShopButton;
    private javax.swing.JLabel direccionLabel;
    private javax.swing.JLabel metodoPagoLabel;
    private javax.swing.JButton returnButton;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel verificacionLabel;
    // End of variables declaration//GEN-END:variables
}
