package proyecto.comercioapp;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import proyecto.db.DBMediator;
import proyecto.utils.CheckUtils;

public class AddDirectionMenu extends javax.swing.JFrame {

    private int usuarioID;
    private Integer direccionID;
    
    public AddDirectionMenu() {
        initComponents();
    }

    public AddDirectionMenu(int usuarioID, Integer direccionID) {
        initComponents();
        this.usuarioID = usuarioID;
        this.direccionID = direccionID;
        if (direccionID != null){
            cargarDatosDireccion();
        }
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddDirectionPanel = new javax.swing.JPanel();
        DireccionLineaLabel1 = new javax.swing.JLabel();
        DireccionLineaTextField1 = new javax.swing.JTextField();
        DireccionLineaLabel2 = new javax.swing.JLabel();
        DireccionLineaTextField2 = new javax.swing.JTextField();
        paisLabel = new javax.swing.JLabel();
        paisesComboBox = new javax.swing.JComboBox<>();
        estadoLabel = new javax.swing.JLabel();
        estadosComboBox = new javax.swing.JComboBox<>();
        ciudadLabel = new javax.swing.JLabel();
        ciudadTextField = new javax.swing.JTextField();
        codigoPostalLabel = new javax.swing.JLabel();
        codigoPostalTextField = new javax.swing.JTextField();
        telefonoLabel = new javax.swing.JLabel();
        telefonoTextField = new javax.swing.JTextField();
        direccionesLabel = new javax.swing.JLabel();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agregar Dirección");
        setResizable(false);

        AddDirectionPanel.setBackground(new java.awt.Color(153, 204, 255));

        DireccionLineaLabel1.setForeground(new java.awt.Color(0, 0, 0));
        DireccionLineaLabel1.setText("Linea de Direccion #1");

        DireccionLineaLabel2.setForeground(new java.awt.Color(0, 0, 0));
        DireccionLineaLabel2.setText("Linea de Direccion #2");

        paisLabel.setForeground(new java.awt.Color(0, 0, 0));
        paisLabel.setText("País");

        List<String> paises = DBMediator.getPaises();
        paisesComboBox.setMaximumRowCount(5);
        if(paises != null && !paises.isEmpty()){
            paisesComboBox.setModel(new DefaultComboBoxModel<>(paises.toArray(new String[0])));
            paisesComboBox.setSelectedIndex(0); // Seleccionar el primer país por defecto
        } else {
            paisesComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "No hay países disponibles" }));
        }

        // Agregar un ActionListener al comboBox de países
        paisesComboBox.addActionListener(e -> {
            String paisSeleccionado = (String) paisesComboBox.getSelectedItem();

            if (paisSeleccionado != null) {
                List<String> estados = DBMediator.getEstadosPorPais(paisSeleccionado);

                if (estados != null && !estados.isEmpty()) {
                    estadosComboBox.setModel(new DefaultComboBoxModel<>(estados.toArray(new String[0])));
                } else {
                    estadosComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "No hay estados disponibles" }));
                }
            } else {
                estadosComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Seleccione un país" }));
            }
        });

        estadoLabel.setForeground(new java.awt.Color(0, 0, 0));
        estadoLabel.setText("Estado / Provincia");

        estadosComboBox.setMaximumRowCount(5);
        String paisSeleccionado = (String) paisesComboBox.getSelectedItem();
        if(paisSeleccionado != null){
            List<String> estados = DBMediator.getEstadosPorPais(paisSeleccionado);
            if(estados != null && !estados.isEmpty()){
                estadosComboBox.setModel(new DefaultComboBoxModel<>(estados.toArray(new String[0])));
            }else{
                estadosComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "No hay estados disponibles" }));
            }
        }else{
            estadosComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Seleccione un país" }));
        }

        ciudadLabel.setForeground(new java.awt.Color(0, 0, 0));
        ciudadLabel.setText("Ciudad");

        codigoPostalLabel.setForeground(new java.awt.Color(0, 0, 0));
        codigoPostalLabel.setText("Código Postal");

        telefonoLabel.setForeground(new java.awt.Color(0, 0, 0));
        telefonoLabel.setText("Teléfono de contacto");

        direccionesLabel.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        direccionesLabel.setForeground(new java.awt.Color(0, 0, 0));
        direccionesLabel.setText("Registrar Dirección");

        acceptButton.setText("Aceptar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddDirectionPanelLayout = new javax.swing.GroupLayout(AddDirectionPanel);
        AddDirectionPanel.setLayout(AddDirectionPanelLayout);
        AddDirectionPanelLayout.setHorizontalGroup(
            AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddDirectionPanelLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(direccionesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(telefonoTextField)
                        .addComponent(telefonoLabel)
                        .addComponent(codigoPostalTextField)
                        .addComponent(codigoPostalLabel)
                        .addComponent(DireccionLineaLabel1)
                        .addComponent(DireccionLineaLabel2)
                        .addComponent(DireccionLineaTextField2)
                        .addComponent(paisLabel)
                        .addComponent(paisesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(estadoLabel)
                        .addComponent(estadosComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ciudadLabel)
                        .addComponent(ciudadTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                        .addComponent(DireccionLineaTextField1)))
                .addContainerGap(79, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddDirectionPanelLayout.createSequentialGroup()
                .addContainerGap(255, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(18, 18, 18)
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(271, 271, 271))
        );
        AddDirectionPanelLayout.setVerticalGroup(
            AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddDirectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(direccionesLabel)
                .addGap(13, 13, 13)
                .addComponent(DireccionLineaLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DireccionLineaTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DireccionLineaLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DireccionLineaTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paisLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paisesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(estadoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estadosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ciudadLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ciudadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(codigoPostalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codigoPostalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(telefonoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(telefonoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddDirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddDirectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddDirectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro de regresar? No se guardarán los cambios.", 
            "Advertencia", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.WARNING_MESSAGE
    );
    
    if (respuesta == JOptionPane.YES_OPTION) {
        // Cerrar la ventana actual y abrir una nueva instancia de DirectionMenu
        this.dispose(); // Cierra la ventana actual
        DirectionMenu directionMenu = new DirectionMenu(usuarioID); // Crear una nueva instancia
        directionMenu.setVisible(true); // Mostrar la nueva ventana
    }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
            try{
            String linea1 = DireccionLineaTextField1.getText();
            String linea2 = DireccionLineaTextField2.getText();
            String pais = (String) paisesComboBox.getSelectedItem();
            String estado = (String) estadosComboBox.getSelectedItem();
            String ciudad = ciudadTextField.getText();
            String codigoPostal = codigoPostalTextField.getText();
            String telefono = telefonoTextField.getText();

            // Verificar si el código postal es válido
            if(!CheckUtils.isValidPostalCode(codigoPostal)){
              JOptionPane.showMessageDialog(this, "Verifique que el código postal sea válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
              return;
            }

            // Verificar si el telefono de contacto es válido
            if(!CheckUtils.isValidPhoneNumber(telefono)){
              JOptionPane.showMessageDialog(this, "Verifique que el número de teléfono sea válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
              return;            
            }

            int res = DBMediator.upsertDireccionUsuario(direccionID, usuarioID, linea1, linea2, pais, estado, ciudad, codigoPostal, telefono);
            switch (res) {
                case 0 -> {
                    JOptionPane.showMessageDialog(this, "Se ha actualizado exitosamente la dirección.", "Notificación", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                    DirectionMenu direction = new DirectionMenu(usuarioID);
                    direction.setVisible(true);
                }case 1->{
                    JOptionPane.showMessageDialog(this, "Se ha registrado exitosamente la dirección.", "Notificación", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                    DirectionMenu direction = new DirectionMenu(usuarioID);
                    direction.setVisible(true);                    
                }case -1 -> {
                    JOptionPane.showMessageDialog(this, "Verifique no dejar espacios en blanco.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;
                }case -2 -> {
                    JOptionPane.showMessageDialog(this, "El país asociado no se ha encontrado.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;
                }case -3->{
                    JOptionPane.showMessageDialog(this, "El estado asociado no se ha encontrado.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;                
                }default ->{
                    JOptionPane.showMessageDialog(this, "No se ha podido concretar la acción, intente de nuevo porfavor.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;                        
                }
            }          
        }catch (Exception e){
               JOptionPane.showMessageDialog(this, "Se ha producido un error, intente de nuevo por favor.", "Advertencia", JOptionPane.ERROR_MESSAGE);
                return; // Detener la ejecución si la contraseña es inválida
        }        
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cargarDatosDireccion(){
        List <Object> direccionInfo = DBMediator.getDireccionPorID(direccionID);
        DireccionLineaTextField1.setText((String) direccionInfo.get(2));
        DireccionLineaTextField2.setText((String) direccionInfo.get(3));
        paisesComboBox.setSelectedItem(direccionInfo.get(0));
        estadosComboBox.setSelectedItem(direccionInfo.get(1));
        ciudadTextField.setText((String) direccionInfo.get(4));
        codigoPostalTextField.setText((String) direccionInfo.get(5));
        telefonoTextField.setText((String) direccionInfo.get(6));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddDirectionMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddDirectionMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddDirectionMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddDirectionMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddDirectionMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddDirectionPanel;
    private javax.swing.JLabel DireccionLineaLabel1;
    private javax.swing.JLabel DireccionLineaLabel2;
    private javax.swing.JTextField DireccionLineaTextField1;
    private javax.swing.JTextField DireccionLineaTextField2;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel ciudadLabel;
    private javax.swing.JTextField ciudadTextField;
    private javax.swing.JLabel codigoPostalLabel;
    private javax.swing.JTextField codigoPostalTextField;
    private javax.swing.JLabel direccionesLabel;
    private javax.swing.JLabel estadoLabel;
    private javax.swing.JComboBox<String> estadosComboBox;
    private javax.swing.JLabel paisLabel;
    private javax.swing.JComboBox<String> paisesComboBox;
    private javax.swing.JLabel telefonoLabel;
    private javax.swing.JTextField telefonoTextField;
    // End of variables declaration//GEN-END:variables
}
